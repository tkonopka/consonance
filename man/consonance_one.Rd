% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/constructors.R
\name{consonance_one}
\alias{consonance_one}
\alias{consonance_assert}
\alias{consonance_check}
\alias{consonance_test}
\title{create a new consonance assertion, check, or test}
\usage{
consonance_one(
  .desc,
  .fun,
  ...,
  .var = NULL,
  .type = c("test", "assert", "check"),
  .level = c("error", "warning", "info")
)

consonance_assert(.desc, .fun, ..., .type = "assert")

consonance_check(.desc, .fun, ..., .type = "check")

consonance_test(.desc, .fun, ..., .type = "test")
}
\arguments{
\item{.desc}{character, test description}

\item{.fun}{function}

\item{...}{arguments to pass into .fun}

\item{.type}{character, type of function, refer to 'checkmate' documentation
for the distinction between 'assert', 'check', and 'test' functions.}

\item{.level}{character, action triggered by a failing test}

\item{.value.var}{character, component of a data object to test}
}
\value{
object x, unchanged
}
\description{
This is a constructor which generates an object. The object can be
inspected using print or str.
}
\examples{

# define custom a assertion or test
assert_positive <- function(x) {
  stopifnot(all(x>0))
  x
}
test_positive <- function(x) {
  all(x>0)
}

# construct an assertion / test for vectors
vector_assertion <- consonance_assert("vec positive", assert_positive)
vector_assertion
vector_test <- consonance_test("vec_positive", test_positive)
vector_test

# construct an assertion / test for a column ('val') in a data frame
df_assertion <- consonance_assert("df column positive", assert_positive,
                                  .var="val")
df_assertion
df_test <- consonance_test("def column positive", test_positive,
                           .var="val")
df_test

}
\keyword{internal}
